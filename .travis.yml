# use containers (so no sudo ?)
sudo: false

#os:
#  - linux
#  - osx

dist: 
   - xenial
   - trusty

language: python

#  from https://docs.travis-ci.com/user/caching/
# Large files that are quick to install but slow to download do not benefit 
# from caching, as they take as long to download from the cache as from the 
# original source: do not cache Debian packages.
# pip and R packages can be cached.
#Sphinx and FreeCAD packages?

# This should be enabled if pip is used
#cache: pip

# trigger on pushes to master branch
branches:
  only:
   - master

#specify multiple parallel jobs
matrix:
    include:
        - name: "freecad - python 2"
          python: 2.7
          FC: "freecad"
          env: BLD="fcP2"

#  is thisstill not using freecad with python 3 ??
        - name: "freecad - python 3"
          python: 3.6
          FC: "freecad"
          env: BLD="fcP3"

        - name: "freecad-daily - python 2"
          python: 2.7
          FC: "freecad-daily"
          env: BLD="fc-dP2"

#        - name: "freecad-daily - python 3"
#          python: 3.6
#          FC: "freecad-daily"
#          env: BLD="fcd-dP3"

# Notes about methods for installing dependencies follow, then install.
# See also  https://docs.travis-ci.com/user/installing-dependencies/
# Currently apt-get seems prefered. It is done in before_install: whereas
# some of the other options might be done in install:.

# It might be possible to use FreeCAD AppImage but then Sphinx needs to find 
# the FreeCAD python libraries inside the AppImage, or sphinx needs to run
# inside the image.

#Draft attempt at using AppImage:
# run AppImage to run freecad. Updating the image is only useful if the old
# image is cached, and it is not clear there is any advantage when cache is
# loaded over the network.
#  - wget https://github.com/AppImage/AppImageUpdate/releases/download/continuous/appimageupdatetool-x86_64.AppImage
#  - chmod +x ./appimageupdatetool-x86_64.AppImage
#  - wget https://github.com/FreeCAD/FreeCAD/releases/download/0.18.1/FreeCAD_0.18-16110-Linux-Conda_Py3Qt5_glibc2.12-x86_64.AppImage
#  - chmod +x ./FreeCAD*.AppImage
#  - ./appimageupdatetool.AppImage path/to/old/FreeCAD.AppImage ./path/to/updated/FreeCAD.AppImage


# It would be possible to use Condo, but that seems to generate library 
# downloads almost as big as apt upgrade, so will be very slow. Draft attempt:
  
#  # Install Anaconda
#  - echo PYTHON_VERSION $PYTHON_VERSION
#  - echo TRAVIS_PYTHON_VERSION $TRAVIS_PYTHON_VERSION
#  - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
#      wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
#    else
#      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
#    fi
#  - bash miniconda.sh -b -p $HOME/miniconda
#  - export PATH="$HOME/miniconda/bin:$PATH"
#  - hash -r
#  - conda config --set always_yes yes --set changeps1 no
#  - conda update -q conda
#  - conda config --add channels conda-forge
#  - conda update -q conda
#  - conda create -n FC_test freecad
#  - conda init bash # nodifies .bashrc
#  - conda activate  FC_test
#  - bash
#  - conda deactivate # removes modifications to .bashrc

# pip can be used? but put things in different directory apt-get,
# so, at least,  PATH and PYTHONPATH need adjustment. Draft:
#  - pip install -U sphinx
#  - pip3 install -U sphinx
#   # installs in /home/travis/virtualenv/python2.7.14/bin/sphinx-build
#  - pip install -U pip freecad

# sheck here to see if the ppa is up-to-date
# https://launchpad.net/~freecad-maintainers/+archive/ubuntu/freecad-stable
# https://launchpad.net/~freecad-maintainers/+archive/ubuntu/freecad-daily

before_install:
  - cat /etc/*-release
  - echo TRAVIS_PYTHON_VERSION is $TRAVIS_PYTHON_VERSION
  - echo BLD is $BLD

  - if [[ "$BLD" == "fcP2" ]]; then
       export FC="freecad" ;
       export PYTHON=python2 ;
       sudo add-apt-repository --yes ppa:freecad-maintainers/freecad-stable ;
       sudo apt-get update  -q ;
       sudo apt-get install --yes  freecad ;
    fi
  - if [[ "$BLD" == "fcP2" ]]; then
       sudo apt-get install --yes  python-sphinx  sphinx-common ;
       export DISPKG=`dpkg -L python-sphinx | grep "dist-packages$"` ; 
    fi
  - if [[ "$BLD" == "fc-dP2" ]]; then
       export FC="freecad-daily" ;
       export PYTHON=python2 ;
       sudo add-apt-repository --yes ppa:freecad-maintainers/freecad-daily ;
       sudo apt-get update  -q ;
       sudo apt-get install --yes  freecad-daily ;
       sudo apt-get install --yes  python-sphinx  sphinx-common ;
       export DISPKG=`dpkg -L python-sphinx | grep "dist-packages$"` ; 
    fi
  - if [[ "$BLD" == "fcP3" ]]; then
       export FC="freecad" ;
       export PYTHON=python3 ;
       sudo add-apt-repository --yes ppa:freecad-maintainers/freecad-stable ;
       sudo apt-get update  -q ;
       sudo apt-get install --yes  freecad freecad-common freecad-runtime ;
       sudo apt-get install --yes  freecad-python3   libfreecad-python3-0.18 ;
       sudo apt-get install --yes  python3-sphinx sphinx-common ;
       export DISPKG=`dpkg -L python3-sphinx | grep "dist-packages$"` ; 
    fi

  - sudo apt-cache showpkg freecad 
  - sudo apt-cache policy freecad

install:
  - which sphinx-build
  - sphinx-build --version


script:
  - ./foldAndColour "echo this should be green | grep green"  "fold_test_1"
  # next test exits 1, so build fails
  # - ./foldAndColour "echo this should be red   | grep green"  "fold_test_2"
  - echo FC is ${FC}
  # FREECAD_VERSION not currently used, may need in future for archiving
  - FREECAD_VERSION=`./freecad--version ${FC}`
  - echo FREECAD_VERSION is ${FREECAD_VERSION}

  - echo PWD is ${PWD} 
  - sphinx-build --version

  - echo TRAVIS_PYTHON_VERSION is $TRAVIS_PYTHON_VERSION
  - echo   PYTHON is ${PYTHON} 
  - ${PYTHON}  --version

  - export PYTHONPATH=${DISPKG}:${PWD}/lib:${PYTHONPATH}
  - echo   PYTHONPATH is ${PYTHONPATH} 

  - ${PYTHON} -c 'import os, sys ; print(str(sys.path))'
  - ${PYTHON} -c 'import sphinx, sys ; print(str(sys.path))'
  - ${PYTHON} -c 'import sphinx, sys ; print(sphinx.__file__)'
  #  gives/usr/lib/python2.7/dist-packages/sphinx/__init__.pyc

  # Makefile now will do this construct of BUILD by default, so BUILDDIR does
  #  not need to be specified, but it is needed below for freecadPythonCheck
  #  and in after_success so probably better  to specify it here
  - export BUILD=build_${FC}/${PYTHON}

  - echo Sphinx building with FREECAD=${FC} PYTHON=${PYTHON} BUILDDIR=${BUILD}    
  - ./foldAndColour "make FREECAD=${FC}  PYTHON=${PYTHON} BUILDDIR=${BUILD} doctest " "run doctest"
  #- make FREECAD=${FC}  PYTHON=${PYTHON} BUILDDIR=${BUILD} doctest

  - ./foldAndColour "make FREECAD=${FC}  PYTHON=${PYTHON} BUILDDIR=${BUILD} html " "generate html"
  #- make FREECAD=${FC}  PYTHON=${PYTHON} BUILDDIR=${BUILD} html

  #  confirm this actually used the correct python
  - ./freecadPythonCheck ${BUILD}


# Note that the build happens on master (or elsewhere)
# but the html and other output needs to go on branch gh-pages.
# Deploy looks after that but 
# another problem is that results from freecad vs freecad-daily can clobber one
# another (build dir gets cleaned) and also clobber the top level files
# index.html and README.md.

# This did not work very well:
#  - git symbolic-ref HEAD
#Beware: This creates a new branch called ${BUILD} on origin if it does not 
#exist, and pushes to it without creating the branch locally.
#  - git push origin HEAD:${BUILD}
#to cleanup
#git push origin --delete ${BUILD}
#See https://git-scm.com/docs/git-push#NOTE ABOUT FAST-FORWARDS
# Since Travis matrix of jobs are
# building in different directories could use --rebase in place of merge.
#  - git remote set-url origin #https://${GITHUB_TOKEN}@github.com/pdgilbert/EgFreeCAD.git
#  - git fetch
#  - git pull   --rebase 

# use tightly scoped key

after_success:  # can be used for customized deploy or to unsupported Providers 
   #BUILD=build_${FC}/${PYTHON}
  - echo $PWD
  - ls
  - mkdir -p NewBuild
  - mv ${BUILD}/*  NewBuild
  - git clone https://${GITHUB_TOKEN}@github.com/pdgilbert/EgFreeCAD.git
  - cd EgFreeCAD
  - git checkout gh-pages
  - git status
  - mkdir -p ${BUILD}
  - cp -r ../NewBuild/*  ${BUILD}
  - echo $PWD
  - ls
  - git add ${BUILD}
  - git status 
  - git commit -am "commiting new build."
  - git status 
  - git push  
  - git status
  - echo  pushed ${BUILD} on gh-pages branch

# see https://docs.travis-ci.com/user/deployment/pages/
#   https://docs.travis-ci.com/user/deployment/#Conditional-Releases-with-on%3A
#deploy:
#  verbose: true
#  provider: pages
#  skip_cleanup: true #otherwise files created during the build are deleted
#  github_token: "${GITHUB_TOKEN}"  # Set in the settings page of  repository
#  keep_history: true  # maybe false for this??
#  # on: provides conditions on which to deploy
#  on:
#    branch: master
#  target_branch: gh-pages
